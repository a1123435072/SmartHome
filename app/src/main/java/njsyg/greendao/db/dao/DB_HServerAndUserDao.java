package njsyg.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import njsyg.greendao.db.model.DB_HServerAndUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB__HSERVER_AND_USER".
*/
public class DB_HServerAndUserDao extends AbstractDao<DB_HServerAndUser, Long> {

    public static final String TABLENAME = "DB__HSERVER_AND_USER";

    /**
     * Properties of entity DB_HServerAndUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Hserver_sn = new Property(1, String.class, "hserver_sn", false, "HSERVER_SN");
        public final static Property Hserver_ip = new Property(2, String.class, "hserver_ip", false, "HSERVER_IP");
        public final static Property User_phoneNumber = new Property(3, String.class, "user_phoneNumber", false, "USER_PHONE_NUMBER");
        public final static Property Hserver_nickName = new Property(4, String.class, "hserver_nickName", false, "HSERVER_NICK_NAME");
        public final static Property Addtime = new Property(5, java.util.Date.class, "addtime", false, "ADDTIME");
        public final static Property Isdefault = new Property(6, Integer.class, "isdefault", false, "ISDEFAULT");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    };


    public DB_HServerAndUserDao(DaoConfig config) {
        super(config);
    }

    public DB_HServerAndUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DB__HSERVER_AND_USER' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'HSERVER_SN' TEXT," + // 1: hserver_sn
                "'HSERVER_IP' TEXT," + // 2: hserver_ip
                "'USER_PHONE_NUMBER' TEXT," + // 3: user_phoneNumber
                "'HSERVER_NICK_NAME' TEXT," + // 4: hserver_nickName
                "'ADDTIME' INTEGER," + // 5: addtime
                "'ISDEFAULT' INTEGER," + // 6: isdefault
                "'REMARK' TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DB__HSERVER_AND_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DB_HServerAndUser entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String hserver_sn = entity.getHserver_sn();
        if (hserver_sn != null) {
            stmt.bindString(2, hserver_sn);
        }

        String hserver_ip = entity.getHserver_ip();
        if (hserver_ip != null) {
            stmt.bindString(3, hserver_ip);
        }

        String user_phoneNumber = entity.getUser_phoneNumber();
        if (user_phoneNumber != null) {
            stmt.bindString(4, user_phoneNumber);
        }

        String hserver_nickName = entity.getHserver_nickName();
        if (hserver_nickName != null) {
            stmt.bindString(5, hserver_nickName);
        }

        java.util.Date addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindLong(6, addtime.getTime());
        }

        Integer isdefault = entity.getIsdefault();
        if (isdefault != null) {
            stmt.bindLong(7, isdefault);
        }

        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public DB_HServerAndUser readEntity(Cursor cursor, int offset) {
        DB_HServerAndUser entity = new DB_HServerAndUser( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hserver_sn
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hserver_ip
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_phoneNumber
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hserver_nickName
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // addtime
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isdefault
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DB_HServerAndUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHserver_sn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHserver_ip(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_phoneNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHserver_nickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddtime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setIsdefault(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, DB_HServerAndUser entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String hserver_sn = entity.getHserver_sn();
        if (hserver_sn != null) {
            stmt.bindString(2, hserver_sn);
        }

        String hserver_ip = entity.getHserver_ip();
        if (hserver_ip != null) {
            stmt.bindString(3, hserver_ip);
        }

        String user_phoneNumber = entity.getUser_phoneNumber();
        if (user_phoneNumber != null) {
            stmt.bindString(4, user_phoneNumber);
        }

        String hserver_nickName = entity.getHserver_nickName();
        if (hserver_nickName != null) {
            stmt.bindString(5, hserver_nickName);
        }

        java.util.Date addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindLong(6, addtime.getTime());
        }

        Integer isdefault = entity.getIsdefault();
        if (isdefault != null) {
            stmt.bindLong(7, isdefault);
        }

        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DB_HServerAndUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(DB_HServerAndUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
