package njsyg.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import njsyg.greendao.db.model.DB_User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB__USER".
*/
public class DB_UserDao extends AbstractDao<DB_User, Long> {

    public static final String TABLENAME = "DB__USER";

    /**
     * Properties of entity DB_User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, Long.class, "user_id", true, "USER_ID");
        public final static Property User_phoneNumber = new Property(1, String.class, "user_phoneNumber", false, "USER_PHONE_NUMBER");
        public final static Property User_nickName = new Property(2, String.class, "user_nickName", false, "USER_NICK_NAME");
        public final static Property User_pwd = new Property(3, String.class, "user_pwd", false, "USER_PWD");
        public final static Property User_email = new Property(4, String.class, "user_email", false, "USER_EMAIL");
        public final static Property User_headImg = new Property(5, String.class, "user_headImg", false, "USER_HEAD_IMG");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
    };


    public DB_UserDao(DaoConfig config) {
        super(config);
    }
    
    public DB_UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB__USER\" (" + //
                "\"USER_ID\" INTEGER PRIMARY KEY ," + // 0: user_id
                "\"USER_PHONE_NUMBER\" TEXT," + // 1: user_phoneNumber
                "\"USER_NICK_NAME\" TEXT," + // 2: user_nickName
                "\"USER_PWD\" TEXT," + // 3: user_pwd
                "\"USER_EMAIL\" TEXT," + // 4: user_email
                "\"USER_HEAD_IMG\" TEXT," + // 5: user_headImg
                "\"REMARK\" TEXT);"); // 6: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB__USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DB_User entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String user_phoneNumber = entity.getUser_phoneNumber();
        if (user_phoneNumber != null) {
            stmt.bindString(2, user_phoneNumber);
        }
 
        String user_nickName = entity.getUser_nickName();
        if (user_nickName != null) {
            stmt.bindString(3, user_nickName);
        }
 
        String user_pwd = entity.getUser_pwd();
        if (user_pwd != null) {
            stmt.bindString(4, user_pwd);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(5, user_email);
        }
 
        String user_headImg = entity.getUser_headImg();
        if (user_headImg != null) {
            stmt.bindString(6, user_headImg);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DB_User entity) {
        stmt.clearBindings();
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(1, user_id);
        }
 
        String user_phoneNumber = entity.getUser_phoneNumber();
        if (user_phoneNumber != null) {
            stmt.bindString(2, user_phoneNumber);
        }
 
        String user_nickName = entity.getUser_nickName();
        if (user_nickName != null) {
            stmt.bindString(3, user_nickName);
        }
 
        String user_pwd = entity.getUser_pwd();
        if (user_pwd != null) {
            stmt.bindString(4, user_pwd);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(5, user_email);
        }
 
        String user_headImg = entity.getUser_headImg();
        if (user_headImg != null) {
            stmt.bindString(6, user_headImg);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DB_User readEntity(Cursor cursor, int offset) {
        DB_User entity = new DB_User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_phoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_pwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_headImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DB_User entity, int offset) {
        entity.setUser_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_phoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_nickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_pwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_email(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_headImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DB_User entity, long rowId) {
        entity.setUser_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DB_User entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
