package njsyg.greendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import njsyg.greendao.db.model.DB_Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB__DEVICE".
*/
public class DB_DeviceDao extends AbstractDao<DB_Device, Long> {

    public static final String TABLENAME = "DB__DEVICE";

    /**
     * Properties of entity DB_Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Device_id = new Property(0, Long.class, "device_id", true, "DEVICE_ID");
        public final static Property Device_sn = new Property(1, String.class, "device_sn", false, "DEVICE_SN");
        public final static Property Hserver_sn = new Property(2, String.class, "hserver_sn", false, "HSERVER_SN");
        public final static Property Device_ip = new Property(3, String.class, "device_ip", false, "DEVICE_IP");
        public final static Property Device_type = new Property(4, Integer.class, "device_type", false, "DEVICE_TYPE");
        public final static Property Device_installPlace = new Property(5, String.class, "device_installPlace", false, "DEVICE_INSTALL_PLACE");
        public final static Property Device_nickName = new Property(6, String.class, "device_nickName", false, "DEVICE_NICK_NAME");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    };


    public DB_DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DB_DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB__DEVICE\" (" + //
                "\"DEVICE_ID\" INTEGER PRIMARY KEY ," + // 0: device_id
                "\"DEVICE_SN\" TEXT," + // 1: device_sn
                "\"HSERVER_SN\" TEXT," + // 2: hserver_sn
                "\"DEVICE_IP\" TEXT," + // 3: device_ip
                "\"DEVICE_TYPE\" INTEGER," + // 4: device_type
                "\"DEVICE_INSTALL_PLACE\" TEXT," + // 5: device_installPlace
                "\"DEVICE_NICK_NAME\" TEXT," + // 6: device_nickName
                "\"REMARK\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB__DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DB_Device entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(2, device_sn);
        }
 
        String hserver_sn = entity.getHserver_sn();
        if (hserver_sn != null) {
            stmt.bindString(3, hserver_sn);
        }
 
        String device_ip = entity.getDevice_ip();
        if (device_ip != null) {
            stmt.bindString(4, device_ip);
        }
 
        Integer device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindLong(5, device_type);
        }
 
        String device_installPlace = entity.getDevice_installPlace();
        if (device_installPlace != null) {
            stmt.bindString(6, device_installPlace);
        }
 
        String device_nickName = entity.getDevice_nickName();
        if (device_nickName != null) {
            stmt.bindString(7, device_nickName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DB_Device entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
 
        String device_sn = entity.getDevice_sn();
        if (device_sn != null) {
            stmt.bindString(2, device_sn);
        }
 
        String hserver_sn = entity.getHserver_sn();
        if (hserver_sn != null) {
            stmt.bindString(3, hserver_sn);
        }
 
        String device_ip = entity.getDevice_ip();
        if (device_ip != null) {
            stmt.bindString(4, device_ip);
        }
 
        Integer device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindLong(5, device_type);
        }
 
        String device_installPlace = entity.getDevice_installPlace();
        if (device_installPlace != null) {
            stmt.bindString(6, device_installPlace);
        }
 
        String device_nickName = entity.getDevice_nickName();
        if (device_nickName != null) {
            stmt.bindString(7, device_nickName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DB_Device readEntity(Cursor cursor, int offset) {
        DB_Device entity = new DB_Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // device_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_sn
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hserver_sn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // device_ip
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // device_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // device_installPlace
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // device_nickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DB_Device entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevice_sn(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHserver_sn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevice_ip(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevice_type(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDevice_installPlace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDevice_nickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DB_Device entity, long rowId) {
        entity.setDevice_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DB_Device entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
